#############################################
##### Testing
#############################################

set(prefix "${MODULE}")

add_test(
    NAME ${prefix}_can_Run
    COMMAND ${APPLICATION}
)
set_tests_properties (${prefix}_can_Run PROPERTIES
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Print_Help_Without_Arguments
    COMMAND ${APPLICATION}
)

set_tests_properties (${prefix}_can_Print_Help_Without_Arguments PROPERTIES
    PASS_REGULAR_EXPRESSION "This is a combination wirh repeats from N to M generator application"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Check_Number_Of_Arguments
    COMMAND ${APPLICATION} 1
)
set_tests_properties (${prefix}_can_Check_Number_Of_Arguments PROPERTIES
    PASS_REGULAR_EXPRESSION "ERROR: Should be 2 arguments."
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Detect_Wrong_Number_Format
    COMMAND ${APPLICATION} 1 i
)
set_tests_properties (${prefix}_can_Detect_Wrong_Number_Format PROPERTIES
    PASS_REGULAR_EXPRESSION "Wrong number format!"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Detect_Incorrect_Number
    COMMAND ${APPLICATION} 0 -7
)
set_tests_properties (${prefix}_can_Detect_Wrong_Number_Format PROPERTIES
    PASS_REGULAR_EXPRESSION "Number must be positive!"
    LABELS "${MODULE}")

add_test(
    NAME ${prefix}_can_Find_1_1_combinations
    COMMAND ${APPLICATION} 1 1
)
set_tests_properties (${prefix}_can_Add_Complexs PROPERTIES
    PASS_REGULAR_EXPRESSION 
        "N = 1
        M = 1
        1: 1"
    LABELS "${MODULE}")
